1. fix the header component and use good images
2. use good images for the best deals component 
3. start creating responsiveness before I go too far in ,my desings
4. solve the like button for the weekly deals
5. 

FOR THE BACKEND
1. when an order is made and payment confirmed send a confirmation with the reciept to the user email
2. when a delivery is made send an email to the user
3. when a user registers send an email to authenticate themselves

//
1. do the login authentication (done)
2. do the register authentication (done)
3. do the order processing
4. add dashboard where a vendor can upload products
5. create the react native application for the logistics part where I have a rider that does the logistics part
6.


TODO
1. make the navbar sticky, not the dropdown just the navbar (done)
2. changes the images in the header (done)
3. add toast so when I click on favourite / like it would alert that an item has been liked (done)

4. create a wish list page 
5. create a cart page (done)
6. Add github workflow (started)
7. Add test for my react code
8. work on the responsiveness (started)
9. create a product description page (done)
10. create the user account section, where the user can setup card for payment edit thier username etc (done) remains (reviews page)
11. create a product page (done)
12. add formik for form validation (started)
13. 

WORKING ON THE RESPONSIVENESS
1. CREATE THE MOBILE NAVBAR (done)
2. CREATE THE MOBILE DROPDOWN NAVBAR (done)
3. REGISTER A NEW USER (done)
4. GET ALL THE PRODUCTS (done)
5. CREATE A CATEGORY IN MY BACKEND FOR FLASH SALES 
6. HOOK UP CREATING AN ORDER

steps invloved in connecting next-auth and google
1. go to cloud.google.com
2. create a new project and give it a unique name to the projects u are building
3. once the projct has been created select the project
4. in the sidedbar menu navigate to apis & services > credentials 
5. click on configure consent screen
6. click on external for the user type
7. fill in fields for (app name, support email, and developer email)
8. click on save and continue till you go back to the dashboard
9. click on credentials in the dashboard sidedbar
10. click on create credentials, click on oAuth2clientid
11. a form will come out for oauth - application type is web application, and leave the name as the default and if you scroll down u will see a place provisioned for url 
12. on the first one enter the index page for your app http://localhost:4000, on the second one enter http://localhost:4000/api/auth/callback/google
13. click on create/save


routine for registering with google
https://stackoverflow.com/questions/60294161/whats-the-nodejs-backend-routine-for-register-signin-with-google

TODO - AUTHENTICATION 
1. When a user login does the session expire and when 
2. When a user login with google account how do I notify my backend to send api token and know that the user is active
3. do sign up auth
4. Do signup with GoogleProvider
-- if I signup with a google provider then it means that I have to create that user on the backend as well with the data the user provides but the things is the user will not have a password can I will leave that user authentication to google to handle, so  if that user login with thier google email, then I would check my backend if the user with that email exists and send a token to the user
- I will have to create another api endpoint for such users

MOBILE RESPONSIVENESS
1. make the navbar responsive and put a hamburger icon when the display is in sm -md range (done)
2. remove 2 items from the category section component when the screen is small and leave it as 4 items when the screen is large (done)

TYPOGRAPHY 
1. change the font family to perhaps inter (done)

FETCH DATA
In the api section when I fetch data make use of swr (done)

HOMEPAGE
1. Add skeleton loading to the homepage products (done)
2. Add pagination for the products section (done)
3. handle broken images in the product section 

CATEGORIES
1. create a product category page
2. create a filter component for ascending order, descending order, filter by price, and sorting
3. 

USE
use formik for form validation in the frontend
usw next swr for data fetching
redux toolkit for global state management

WHEN HANDLING ERROR PAGE / 404 PAGE - USE THIS APPROACH
https://techcrunch.com/nigeria --> just check this link

14 08 2023
1. next api general error handling middleware

order and processing payment
if i use paystack in the client, what if the item the user is trying to order has finished
what if the quantity of the item left is not up to what the user has selected
keep the products quanity in the client and on the server at sync

solution
1. the products on my website have to be in sync with my server
2. when a user is trying to add products to cart check if the quanity the user is trying to add is up to the amount that is in my store

TODO
1. protected routes
2. send cookie to the backend from my frontend nextauth
store the jwt as a cookie in my browser cookie and the send it {withCredentials on axios} to my express server and decode it on my express server as well, 
look at this post for inspiration: 
https://stackoverflow.com/questions/68235182/nextjs-with-next-auth-setting-cookie-received-from-node-js

https://www.reddit.com/r/nextjs/comments/rri1js/how_to_use_nextauth_with_a_separate_backend/

3. add items to wishlist (done)
4. move authentication from next-auth to credentials login and passport login on my backend. (not going to work like I want) because of no.(5)
5. how do i serve next.js app in express server (answered)
6. move my backend code here 
   start from updating my models (done)
   product routes (done)
   order routes (done)
   payment controller - move the getcheckoutsession into the order conroller or create a new route for just checkout (done)
   shipping (done)
   reviews

7.create middlwares
8.add validation and sanitization for my backend models
9. if i click on product card it should take me to single product page for that product from the homepage (done)
10. faq, privacy policy and refund policy page (done)
11. persist the cart in the localstorage or something
12. create protected route for the dashboard if user is not logged in

next.js vs express server
if i export my next.js app it becomes a static file and I am taking out some of next.js features such as getServerSideProps, but I will be able to make use of my express server store my cookies on the client, but I will have to manage user session myself

problems I am facing with using next.js api, 
1. I am having challenge creating express.js kind of middleware in next.js it seems I may have to write the logic for something like authController.protect in all the apis in my next.js api that needs it
2. global error management, I am not really sure how to go about this one sef,
3. serverless function timeout with error 504, like in the case of my create order it takes time and then vercel will just time out this is one of the things i dont like about serverless functions it takes 5s to timeout 

adavantages
1. I don't forfeit next.js features
2. I don't manage user session myself I will use next-auth
3. 


add the user information to header authorization token ? from where 

can I access the next auth user in the middleware ? 
work on the dashboard part so that it pulls the user profile and updates the account dashboard

// DOCKER
1. create docker image

2. create category component where a user can filter the products based on CATEGORIES (important) (in progress)
3. create categories page, so when user clicks on a category like electronics, it will bring out all the data related to electronics (in progress)
4. re-create model in typescript so that i dont have to be using the @ts-ignore
5. add the order to the user document (done)
6. in my single product page, if the modal comes up and i do my authentication the page will redirect me to the homepage instead of it to continue from the single product page even to the cart etc.
7. when i make payment in the checkout page, my app does not redirect to order-confirmation successful page (done)
8. after making payment for an item the item is not removed from my cart (done) 
9. create an admin cms part where they can remove users, monitor orders, create order for client, the admin part will also have web socket connection so anytime a user sends a request or makes an order the admin will be alerted and they would have to take apropriate action
10. if a user is not logged in they will still be able to buy something if the go to the cart and then proceed to checkout 
11. in the user dashboard the user name is only on the firstname, there is no firstname (done)
12. the order page does not show the user order yet
13. there are no reviews or ways to add reviews
14. user password can be updated (done)

REFACTORING
1. Refactor the use of redux and move to zustand completely 

-------------
Features
-------------
1. protected routes
2. 



NEXTAUTH_SECRET=MY_NAME_IS_DAVID_AND_THIS_IS_IS_14227273___NIIWIWJames&Johnarebrother_never_the_same_security_not-test
NEXTAUTH_URL=http://localhost:3002/api/auth/
NEXT_PUBLIC_BASE_URL=http://localhost:3002
NEXT_PUBLIC_API_SERVER=http://localhost:8100/api/v1

# NEXTAUTH_URL=http://127.0.0.1:3002/api/auth/
# NEXTAUTH_URL=http://sage-warehouse-davieoba.vercel.app/api/auth/ (production)
GOOGLE_CLIENT_ID=928018641705-mm3vpuoq2ibmtik0ulpu2ocr9ps9a03u.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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

INSPIRATION=https://nuranium-electronic.myshopify.com/?preview_theme_id=83823493173

ex=https://sage-warehouse-backend.onrender.com/api/v1/

NEXT_PUBLIC_production_server=https://e-commerce-backend-uy4a.onrender.com/api/v1

NEXT_PUBLIC_development_server= http://localhost:8100/api/v1
NEXT_PUBLIC_PRODUCTION_URL=https://e-commerce-app-ts-nextjs.vercel.app/
NEXT_PUBLIC_DEVELOPMENT_URL=http://localhost:3002

MONGODB_USERNAME= bodunrindavid
MONGODB_PASSWORD= gVdgloqAvOMDFnak
MONGODB_URI= mongodb+srv://bodunrindavid:gVdgloqAvOMDFnak@cluster0.6eu2opd.mongodb.net/shopit?retryWrites=true&w=majority
JWT_SECRET=MY_NAME_IS_DAVID_AND_THIS_IS_IS_14227273___NIIWIWJames&Johnarebrother_never_the_same_security_not-test
JWT_EXPIRES= 1d

NEXT_PUBLIC_RESEND_API=re_VjwLCGMf_6UYzD64TYvG3io7C1xRP1xSh

NEXT_PUBLIC_PAYSTACK_API=pk_test_ea304dfb5de5f9062562417fa7e1f4f4e9f278cf
NEXT_PUBLIC_SECRET_PAYSTACK_API=sk_test_1322836f1c679babe5064a4b123e379d971ea790