1. fix the header component and use good images
2. use good images for the best deals component 
3. start creating responsiveness before I go too far in ,my desings
4. solve the like button for the weekly deals
5. 

FOR THE BACKEND
1. when an order is made and payment confirmed send a confirmation with the reciept to the user email
2. when a delivery is made send an email to the user
3. when a user registers send an email to authenticate themselves

//
1. do the login authentication (done)
2. do the register authentication (done)
3. do the order processing
4. add dashboard where a vendor can upload products
5. create the react native application for the logistics part where I have a rider that does the logistics part
6.


TODO
1. make the navbar sticky, not the dropdown just the navbar (done)
2. changes the images in the header (done)
3. add toast so when I click on favourite / like it would alert that an item has been liked (done)

4. create a wish list page 
5. create a cart page (done)
6. Add github workflow (started)
7. Add test for my react code
8. work on the responsiveness (started)
9. create a product description page (done)
10. create the user account section, where the user can setup card for payment edit thier username etc (done) remains (reviews page)
11. create a product page (done)
12. add formik for form validation (started)
13. 

WORKING ON THE RESPONSIVENESS
1. CREATE THE MOBILE NAVBAR (done)
2. CREATE THE MOBILE DROPDOWN NAVBAR (done)
3. REGISTER A NEW USER (done)
4. GET ALL THE PRODUCTS (done)
5. CREATE A CATEGORY IN MY BACKEND FOR FLASH SALES 
6. HOOK UP CREATING AN ORDER

steps invloved in connecting next-auth and google
1. go to cloud.google.com
2. create a new project and give it a unique name to the projects u are building
3. once the projct has been created select the project
4. in the sidedbar menu navigate to apis & services > credentials 
5. click on configure consent screen
6. click on external for the user type
7. fill in fields for (app name, support email, and developer email)
8. click on save and continue till you go back to the dashboard
9. click on credentials in the dashboard sidedbar
10. click on create credentials, click on oAuth2clientid
11. a form will come out for oauth - application type is web application, and leave the name as the default and if you scroll down u will see a place provisioned for url 
12. on the first one enter the index page for your app http://localhost:4000, on the second one enter http://localhost:4000/api/auth/callback/google
13. click on create/save


routine for registering with google
https://stackoverflow.com/questions/60294161/whats-the-nodejs-backend-routine-for-register-signin-with-google

TODO - AUTHENTICATION 
1. When a user login does the session expire and when 
2. When a user login with google account how do I notify my backend to send api token and know that the user is active
3. do sign up auth
4. Do signup with GoogleProvider
-- if I signup with a google provider then it means that I have to create that user on the backend as well with the data the user provides but the things is the user will not have a password can I will leave that user authentication to google to handle, so  if that user login with thier google email, then I would check my backend if the user with that email exists and send a token to the user
- I will have to create another api endpoint for such users

MOBILE RESPONSIVENESS
1. make the navbar responsive and put a hamburger icon when the display is in sm -md range (done)
2. remove 2 items from the category section component when the screen is small and leave it as 4 items when the screen is large (done)

TYPOGRAPHY 
1. change the font family to perhaps inter (done)

FETCH DATA
In the api section when I fetch data make use of swr (done)

HOMEPAGE
1. Add skeleton loading to the homepage products (done)
2. Add pagination for the products section (done)
3. handle broken images in the product section 

CATEGORIES
1. create a product category page
2. create a filter component for ascending order, descending order, filter by price, and sorting
3. 

USE
use formik for form validation in the frontend
usw next swr for data fetching
redux toolkit for global state management

WHEN HANDLING ERROR PAGE / 404 PAGE - USE THIS APPROACH
https://techcrunch.com/nigeria --> just check this link

14 08 2023
1. next api general error handling middleware

order and processing payment
if i use paystack in the client, what if the item the user is trying to order has finished
what if the quantity of the item left is not up to what the user has selected
keep the products quanity in the client and on the server at sync

solution
1. the products on my website have to be in sync with my server
2. when a user is trying to add products to cart check if the quanity the user is trying to add is up to the amount that is in my store

TODO
1. protected routes
2. send cookie to the backend from my frontend nextauth
store the jwt as a cookie in my browser cookie and the send it {withCredentials on axios} to my express server and decode it on my express server as well, 
look at this post for inspiration: 
https://stackoverflow.com/questions/68235182/nextjs-with-next-auth-setting-cookie-received-from-node-js

https://www.reddit.com/r/nextjs/comments/rri1js/how_to_use_nextauth_with_a_separate_backend/

3. add items to wishlist (done)
4. move authentication from next-auth to credentials login and passport login on my backend. (not going to work like I want) because of no.(5)
5. how do i serve next.js app in express server (answered)
6. move my backend code here 
   start from updating my models
7.create middlwares

next.js vs express server
if i export my next.js app it becomes a static file and I am taking out some of next.js features such as getServerSideProps, but I will be able to make use of my express server store my cookies on the client, but I will have to manage user session myself

problems I am facing with using next.js api, 
1. I am having challenge creating express.js kind of middleware in next.js it seems I may have to write the logic for something like authController.protect in all the apis in my next.js api that needs it
2. global error management, I am not really sure how to go about this one sef,

adavantages
1. I don't forfeit next.js features
2. I don't manage user session myself I will use next-auth
3. 